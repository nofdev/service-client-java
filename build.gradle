apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://10.32.11.210:8081/nexus/content/groups/public" }
}

group = 'org.nofdev'
version = '1.0.9'
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

[compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.4"
    compile "com.fasterxml.jackson.core:jackson-databind:2.6.3"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.3"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.3"
    compile (group: 'org.nofdev', name: 'service-core', version: '1.0.3')
    compile "org.nofdev:http-client-util:1.0.0"
    compile 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.1'

    testCompile(
            "org.spockframework:spock-core:1.0-groovy-2.4",
            "org.mock-server:mockserver-netty:3.4"
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

def isMvnCentral
if (hasProperty("isMavenCentral")) {
    isMvnCentral = isMavenCentral
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext {
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}
configurations {
    pom
}

// summarize artifacts
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    if (pomFile.exists()) {
        pom pomFile
    }
}

// sign all artifacts
task signJars(type: Sign, dependsOn: [jar, javadocJar, sourceJar]) {
    sign configurations.archives
}

// sign pom
task signPom(type: Sign) {
    sign configurations.pom
}

// defining which tasks should be called
if (project.ext.pomFile.exists()) {
    task preparePublication(dependsOn: [signJars, signPom])
} else {
    task preparePublication(dependsOn: signJars)
}

// extract signature file and give them proper name
def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar, classifier: null, extension: 'jar.asc']
    ]
}

// extract pom signature
def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect { it }[0]
}

// ./graldew clean generatePomFileForJarPublication -PisMavenCentral=true
// ./gradlew clean pP publish -PmavenUrl=xxx -PmavenUser=xxx -PmavenPassword=xxx -Psigning.keyId=xxx -Psigning.password=xxx -Psigning.secretKeyRingFile=xxx -PisMavenCentral=true
publishing {
    publications {
        jar(MavenPublication) {
            from components.java
            pom.withXml {
                // add required elements
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'service-client-java'
                    description 'The client side componet of Nofdev RPC framework'
                    url 'https://github.com/nofdev/service-client-java'
                    scm {
                        url 'https://github.com/nofdev/service-client-java.git'
                        connection 'scm:git:git://github.com/nofdev/service-client-java.git'
                        developerConnection 'scm:git:ssh:git@github.com:nofdev/service-client-java.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'mengqiang'
                            name 'Quincy Meng'
                            email 'mengqiang81@gmail.com'
                        }
                    }
                }
            }
            artifact sourceJar
            artifact javadocJar

            if (project.ext.pomFile.exists() && isMvnCentral == "true") {
                getSignatureFiles().each { signature ->
                    artifact(signature.archive) {
                        classifier = signature.classifier
                        extension = signature.extension
                    }
                }
                artifact(getPomSignature()) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
        }

//        gpgJars(MavenPublication) {
//            getSignatureFiles().each { signature ->
//                artifact(signature.archive) {
//                    classifier = signature.classifier
//                    extension = signature.extension
//                }
//            }
//        }
//
//        if (project.ext.pomFile.exists()) {
//            gpgPom(MavenPublication) {
//                artifact(getPomSignature()) {
//                    classifier = null
//                    extension = 'pom.asc'
//                }
//            }
//        }

    }
    repositories {
        if (project.ext.pomFile.exists() && isMvnCentral == "true") {
            maven {
                url mavenUrl
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
        } else {
            mavenLocal()
        }
    }
}

model {
    if (isMvnCentral == "true") {
        tasks.generatePomFileForJarPublication {
            destination = project.ext.pomFile
        }
    }
}